{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ====================================================================\
ASSIGNMENT 36: Abstract Classes\
====================================================================\
\
QUESTION:\
Abstract Classes\
\
(a) Create an abstract class Vehicle which contains an abstract method run()\
\
(b) Create a subclass Car which extends the Vehicle class and implements the run method that prints "Car is running on 4 wheels"\
\
(c) Also create another subclass Bike which again extends the Vehicle class and implements the run method that prints "Bike is running on 2 wheels"\
\
(d) Finally create a Demo class containing the main method to verify the results\
\
ANSWER\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
Abstract Classes in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 (a) Create an abstract class Vehicle with an abstract method run()\
(b) Subclass Car \uc0\u8594  implements run() method\
(c) Subclass Bike \uc0\u8594  implements run() method\
(d) Demo class with main() method to run and verify\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa280\partightenfactor0
\cf0 Java Code\
\pard\pardeftab720\partightenfactor0
\cf0 java\
// Vehicle.java\
abstract class Vehicle \{\
    abstract void run();  // Abstract method\
\}\
\
// Car.java\
class Car extends Vehicle \{\
    void run() \{\
        System.out.println("Car is running on 4 wheels");\
    \}\
\}\
\
// Bike.java\
class Bike extends Vehicle \{\
    void run() \{\
        System.out.println("Bike is running on 2 wheels");\
    \}\
\}\
\
// Demo.java\
public class Demo \{\
    public static void main(String[] args) \{\
        Vehicle car = new Car();     // Vehicle reference \uc0\u8594  Car object\
        Vehicle bike = new Bike();   // Vehicle reference \uc0\u8594  Bike object\
\
        car.run();   // Calls Car's implementation\
        bike.run();  // Calls Bike's implementation\
    \}\
\}\
\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 Output:\
Car is running on 4 wheels\
Bike is running on 2 wheels\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa280\partightenfactor0
\cf0 Explanation (Simple Words)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Vehicle is an abstract class \uc0\u8594  it has an abstract method run(), meaning subclasses must implement it.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Car and Bike are concrete subclasses and give their own version of run().\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
In the Demo class, we use polymorphism: the Vehicle reference points to different objects (Car, Bike) and calls the correct run() method.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 STUDENT DETAILS:\
Name     : Gaurav Kumar\
Email    : gk3759307@gmail.com\
Course   : Java \'96 Spoken Tutorial, IIT Bombay\
College  : Government Polytechnic Gaya \expnd0\expndtw0\kerning0
\
}